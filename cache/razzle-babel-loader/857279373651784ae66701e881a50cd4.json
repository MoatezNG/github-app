{"ast":null,"code":"import { useEffect, useState } from 'react';\nexport const usePagination = (data, limit) => {\n  const {\n    0: paginationInfo,\n    1: setPaginationInfo\n  } = useState({\n    activePage: 1\n  });\n  const {\n    0: paginatedData,\n    1: setPaginatedData\n  } = useState([]);\n  useEffect(() => {\n    setPaginatedData(data.slice((paginationInfo.activePage - 1) * limit, limit * activePage));\n  }, [activePage, data]);\n\n  const handleNextPage = (_, props) => {\n    setActivePage(props.activePage);\n  };\n\n  return {\n    paginatedData,\n    handleNextPage,\n    activePage\n  };\n};","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/hooks/usePagination.ts"],"names":["useEffect","useState","usePagination","data","limit","paginationInfo","setPaginationInfo","activePage","paginatedData","setPaginatedData","slice","handleNextPage","_","props","setActivePage"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA,OAAO,MAAMC,aAAa,GAAG,CAC3BC,IAD2B,EAE3BC,KAF2B,KAOxB;AACH,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCL,QAAQ,CAAsC;AACxFM,IAAAA,UAAU,EAAE;AAD4E,GAAtC,CAApD;AAGA,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCR,QAAQ,CAAM,EAAN,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,gBAAgB,CACdN,IAAI,CAACO,KAAL,CAAW,CAAEL,cAAc,CAACE,UAAhB,GAAwC,CAAzC,IAA8CH,KAAzD,EAAgEA,KAAK,GAAGG,UAAxE,CADc,CAAhB;AAGD,GAJQ,EAIN,CAACA,UAAD,EAAaJ,IAAb,CAJM,CAAT;;AAKA,QAAMQ,cAAc,GAAG,CAACC,CAAD,EAAyCC,KAAzC,KAAoE;AACzFC,IAAAA,aAAa,CAACD,KAAK,CAACN,UAAP,CAAb;AACD,GAFD;;AAIA,SAAO;AAAEC,IAAAA,aAAF;AAAiBG,IAAAA,cAAjB;AAAiCJ,IAAAA;AAAjC,GAAP;AACD,CAvBM","sourcesContent":["import { useEffect, useState } from 'react';\nimport { PaginationProps } from 'semantic-ui-react';\n\nexport const usePagination = <T extends Record<string, any>>(\n  data: T[],\n  limit: number,\n): {\n  paginatedData: T[];\n  handleNextPage: (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => void;\n  activePage: number;\n} => {\n  const [paginationInfo, setPaginationInfo] = useState<Pick<PaginationProps, 'activePage'>>({\n    activePage: 1,\n  });\n  const [paginatedData, setPaginatedData] = useState<T[]>([]);\n\n  useEffect(() => {\n    setPaginatedData(\n      data.slice(((paginationInfo.activePage as number) - 1) * limit, limit * activePage),\n    );\n  }, [activePage, data]);\n  const handleNextPage = (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => {\n    setActivePage(props.activePage as number);\n  };\n\n  return { paginatedData, handleNextPage, activePage };\n};\n"]},"metadata":{},"sourceType":"module"}