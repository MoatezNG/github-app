{"ast":null,"code":"import { getSearchedRepositories } from 'client/actions/github';\nimport { useAppDispatch } from 'client/_redux/app/store';\nimport { useState, useCallback, useEffect } from 'react';\nexport var usePagination = function usePagination() {\n  var dispatch = useAppDispatch();\n\n  var _useState = useState(1),\n      activePage = _useState[0],\n      setActivePage = _useState[1];\n\n  var handleNextPage = function handleNextPage(_, props) {\n    setActivePage(props.activePage);\n  };\n\n  var _useState2 = useState('q'),\n      keyword = _useState2[0],\n      setKeyword = _useState2[1];\n\n  var onSearch = useCallback(function (e) {\n    setKeyword(e.target.value);\n    setActivePage(1);\n  }, []);\n  useEffect(function () {\n    dispatch(getSearchedRepositories({\n      q: keyword,\n      page: activePage\n    }));\n  }, [activePage, keyword]);\n  return {\n    handleNextPage: handleNextPage,\n    activePage: activePage,\n    setActivePage: setActivePage,\n    onSearch: onSearch\n  };\n};","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/hooks/usePagination.ts"],"names":["getSearchedRepositories","useAppDispatch","useState","useCallback","useEffect","usePagination","dispatch","activePage","setActivePage","handleNextPage","_","props","keyword","setKeyword","onSearch","e","target","value","q","page"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,uBAAxC;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD;AAGA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAKxB;AACH,MAAMC,QAAQ,GAAGL,cAAc,EAA/B;;AAEA,kBAAoCC,QAAQ,CAAC,CAAD,CAA5C;AAAA,MAAOK,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,CAAD,EAAyCC,KAAzC,EAAoE;AACzFH,IAAAA,aAAa,CAACG,KAAK,CAACJ,UAAP,CAAb;AACD,GAFD;;AAIA,mBAA8BL,QAAQ,CAAC,GAAD,CAAtC;AAAA,MAAOU,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAMC,QAAQ,GAAGX,WAAW,CAAC,UAACY,CAAD,EAA4C;AACvEF,IAAAA,UAAU,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AACAT,IAAAA,aAAa,CAAC,CAAD,CAAb;AACD,GAH2B,EAGzB,EAHyB,CAA5B;AAKAJ,EAAAA,SAAS,CAAC,YAAM;AACdE,IAAAA,QAAQ,CAACN,uBAAuB,CAAC;AAAEkB,MAAAA,CAAC,EAAEN,OAAL;AAAcO,MAAAA,IAAI,EAAEZ;AAApB,KAAD,CAAxB,CAAR;AACD,GAFQ,EAEN,CAACA,UAAD,EAAaK,OAAb,CAFM,CAAT;AAGA,SAAO;AACLH,IAAAA,cAAc,EAAdA,cADK;AAELF,IAAAA,UAAU,EAAVA,UAFK;AAGLC,IAAAA,aAAa,EAAbA,aAHK;AAILM,IAAAA,QAAQ,EAARA;AAJK,GAAP;AAMD,CA7BM","sourcesContent":["import { getSearchedRepositories } from 'client/actions/github';\nimport { useAppDispatch } from 'client/_redux/app/store';\nimport { useState, useCallback, useEffect } from 'react';\nimport { PaginationProps } from 'semantic-ui-react';\n\nexport const usePagination = (): {\n  handleNextPage: (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => void;\n  activePage: number;\n  setActivePage: (value: React.SetStateAction<number>) => void;\n  onSearch: (e: React.ChangeEvent<HTMLInputElement>) => void;\n} => {\n  const dispatch = useAppDispatch();\n\n  const [activePage, setActivePage] = useState(1);\n\n  const handleNextPage = (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => {\n    setActivePage(props.activePage as number);\n  };\n\n  const [keyword, setKeyword] = useState('q');\n  const onSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setKeyword(e.target.value);\n    setActivePage(1);\n  }, []);\n\n  useEffect(() => {\n    dispatch(getSearchedRepositories({ q: keyword, page: activePage }));\n  }, [activePage, keyword]);\n  return {\n    handleNextPage,\n    activePage,\n    setActivePage,\n    onSearch,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}