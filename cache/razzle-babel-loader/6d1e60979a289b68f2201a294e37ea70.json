{"ast":null,"code":"import _defineProperty from \"C:/Users/moate/OneDrive/Desktop/Tests/github-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _extraReducers;\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport { getPublicRepositories, getSearchedRepositories } from 'client/actions/github';\nvar initialState = {\n  repositories: [],\n  loading: false\n};\nexport var countSlice = createSlice({\n  name: 'github',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, getPublicRepositories.pending.type, function (state) {\n    state.loading = true;\n  }), _defineProperty(_extraReducers, getPublicRepositories.fulfilled.type, function (state, _ref) {\n    var payload = _ref.payload;\n    state.repositories = payload;\n    state.loading = false;\n  }), _defineProperty(_extraReducers, getPublicRepositories.rejected.type, function (state) {\n    state.loading = false;\n  }), _defineProperty(_extraReducers, getSearchedRepositories.pending.type, function (state) {\n    state.loading = true;\n  }), _defineProperty(_extraReducers, getSearchedRepositories.fulfilled.type, function (state, _ref2) {\n    var payload = _ref2.payload;\n    state.searchedRepositories = payload;\n    state.loading = false;\n  }), _defineProperty(_extraReducers, getSearchedRepositories.rejected.type, function (state) {\n    state.loading = false;\n  }), _extraReducers)\n});\nexport default countSlice.reducer;","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/_redux/reducers/githubReducer.ts"],"names":["createSlice","getPublicRepositories","getSearchedRepositories","initialState","repositories","loading","countSlice","name","reducers","extraReducers","pending","type","state","fulfilled","payload","rejected","searchedRepositories","reducer"],"mappings":";;;;AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,qBAAT,EAAgCC,uBAAhC,QAA+D,uBAA/D;AAUA,IAAMC,YAAwB,GAAG;AAC/BC,EAAAA,YAAY,EAAE,EADiB;AAE/BC,EAAAA,OAAO,EAAE;AAFsB,CAAjC;AAIA,OAAO,IAAMC,UAAU,GAAGN,WAAW,CAAC;AACpCO,EAAAA,IAAI,EAAE,QAD8B;AAEpCJ,EAAAA,YAAY,EAAZA,YAFoC;AAGpCK,EAAAA,QAAQ,EAAE,EAH0B;AAIpCC,EAAAA,aAAa,wDACVR,qBAAqB,CAACS,OAAtB,CAA8BC,IADpB,EAC2B,UAACC,KAAD,EAAW;AAC/CA,IAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACD,GAHU,mCAIVJ,qBAAqB,CAACY,SAAtB,CAAgCF,IAJtB,EAI6B,UACtCC,KADsC,QAGnC;AAAA,QADDE,OACC,QADDA,OACC;AACHF,IAAAA,KAAK,CAACR,YAAN,GAAqBU,OAArB;AACAF,IAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACD,GAVU,mCAWVJ,qBAAqB,CAACc,QAAtB,CAA+BJ,IAXrB,EAW4B,UAACC,KAAD,EAAW;AAChDA,IAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACD,GAbU,mCAgBVH,uBAAuB,CAACQ,OAAxB,CAAgCC,IAhBtB,EAgB6B,UAACC,KAAD,EAAW;AACjDA,IAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACD,GAlBU,mCAoBVH,uBAAuB,CAACW,SAAxB,CAAkCF,IApBxB,EAoB+B,UACxCC,KADwC,SAGrC;AAAA,QADDE,OACC,SADDA,OACC;AACHF,IAAAA,KAAK,CAACI,oBAAN,GAA6BF,OAA7B;AACAF,IAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACD,GA1BU,mCA2BVH,uBAAuB,CAACa,QAAxB,CAAiCJ,IA3BvB,EA2B8B,UAACC,KAAD,EAAW;AAClDA,IAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACD,GA7BU;AAJuB,CAAD,CAA9B;AAqCP,eAAeC,UAAU,CAACW,OAA1B","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { getPublicRepositories, getSearchedRepositories } from 'client/actions/github';\nimport { Repository } from 'models/Repository';\nimport { PaginatedResponse } from 'types/utils';\n\nexport type countState = {\n  repositories: Repository[];\n  searchedRepositories?: PaginatedResponse<Repository>;\n  loading: boolean;\n};\n\nconst initialState: countState = {\n  repositories: [],\n  loading: false,\n};\nexport const countSlice = createSlice({\n  name: 'github',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [getPublicRepositories.pending.type]: (state) => {\n      state.loading = true;\n    },\n    [getPublicRepositories.fulfilled.type]: (\n      state,\n      { payload }: PayloadAction<Repository[]>,\n    ) => {\n      state.repositories = payload;\n      state.loading = false;\n    },\n    [getPublicRepositories.rejected.type]: (state) => {\n      state.loading = false;\n    },\n\n    // search\n    [getSearchedRepositories.pending.type]: (state) => {\n      state.loading = true;\n    },\n\n    [getSearchedRepositories.fulfilled.type]: (\n      state,\n      { payload }: PayloadAction<PaginatedResponse<Repository>>,\n    ) => {\n      state.searchedRepositories = payload;\n      state.loading = false;\n    },\n    [getSearchedRepositories.rejected.type]: (state) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport default countSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}