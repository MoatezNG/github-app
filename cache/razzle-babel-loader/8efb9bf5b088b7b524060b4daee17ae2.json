{"ast":null,"code":"import { useEffect, useState } from 'react';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport var usePagination = function usePagination(data, alreadyPaginatedData, limit) {\n  var _useState = useState(1),\n      activePage = _useState[0],\n      setActivePage = _useState[1];\n\n  var _useState2 = useState([]),\n      paginatedData = _useState2[0],\n      setPaginatedData = _useState2[1];\n\n  var _useState3 = useState(''),\n      keyword = _useState3[0],\n      setKeyword = _useState3[1];\n\n  useEffect(function () {\n    if (!keyword) {\n      setActivePage(1);\n      setPaginatedData(data.slice((activePage - 1) * limit, limit * activePage));\n    }\n\n    setPaginatedData(alreadyPaginatedData);\n  }, [activePage, data, keyword]);\n\n  var handleNextPage = function handleNextPage(_, props) {\n    setActivePage(props.activePage);\n  };\n\n  var onSearch = function onSearch(e) {\n    setKeyword(e.target.value);\n  };\n\n  return {\n    paginatedData: paginatedData,\n    handleNextPage: handleNextPage,\n    activePage: activePage,\n    totalPages: Math.ceil(data.length / limit)\n  };\n};","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/hooks/usePagination.ts"],"names":["useEffect","useState","usePagination","data","alreadyPaginatedData","limit","activePage","setActivePage","paginatedData","setPaginatedData","keyword","setKeyword","slice","handleNextPage","_","props","onSearch","e","target","value","totalPages","Math","ceil","length"],"mappings":"AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA;AACA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAC3BC,IAD2B,EAE3BC,oBAF2B,EAG3BC,KAH2B,EASxB;AACH,kBAAoCJ,QAAQ,CAAC,CAAD,CAA5C;AAAA,MAAOK,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAA0CN,QAAQ,CAAM,EAAN,CAAlD;AAAA,MAAOO,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAA8BR,QAAQ,CAAC,EAAD,CAAtC;AAAA,MAAOS,OAAP;AAAA,MAAgBC,UAAhB;;AACAX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACU,OAAL,EAAc;AACZH,MAAAA,aAAa,CAAC,CAAD,CAAb;AACAE,MAAAA,gBAAgB,CAACN,IAAI,CAACS,KAAL,CAAW,CAACN,UAAU,GAAG,CAAd,IAAmBD,KAA9B,EAAqCA,KAAK,GAAGC,UAA7C,CAAD,CAAhB;AACD;;AACDG,IAAAA,gBAAgB,CAACL,oBAAD,CAAhB;AACD,GANQ,EAMN,CAACE,UAAD,EAAaH,IAAb,EAAmBO,OAAnB,CANM,CAAT;;AAOA,MAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAACC,CAAD,EAAyCC,KAAzC,EAAoE;AACzFR,IAAAA,aAAa,CAACQ,KAAK,CAACT,UAAP,CAAb;AACD,GAFD;;AAIA,MAAMU,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAY;AAC3BN,IAAAA,UAAU,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AACD,GAFD;;AAIA,SAAO;AACLX,IAAAA,aAAa,EAAbA,aADK;AAELK,IAAAA,cAAc,EAAdA,cAFK;AAGLP,IAAAA,UAAU,EAAVA,UAHK;AAILc,IAAAA,UAAU,EAAEC,IAAI,CAACC,IAAL,CAAUnB,IAAI,CAACoB,MAAL,GAAclB,KAAxB;AAJP,GAAP;AAMD,CAlCM","sourcesContent":["import { getSearchedRepositories } from 'client/services/github';\nimport { useEffect, useState } from 'react';\nimport { PaginationProps } from 'semantic-ui-react';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const usePagination = <T extends Record<string, any>>(\n  data: T[],\n  alreadyPaginatedData: T[],\n  limit: number,\n): {\n  paginatedData: T[];\n  handleNextPage: (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => void;\n  activePage: number;\n  totalPages: number;\n} => {\n  const [activePage, setActivePage] = useState(1);\n  const [paginatedData, setPaginatedData] = useState<T[]>([]);\n  const [keyword, setKeyword] = useState('');\n  useEffect(() => {\n    if (!keyword) {\n      setActivePage(1);\n      setPaginatedData(data.slice((activePage - 1) * limit, limit * activePage));\n    }\n    setPaginatedData(alreadyPaginatedData);\n  }, [activePage, data, keyword]);\n  const handleNextPage = (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => {\n    setActivePage(props.activePage as number);\n  };\n\n  const onSearch = (e: any) => {\n    setKeyword(e.target.value);\n  };\n\n  return {\n    paginatedData,\n    handleNextPage,\n    activePage,\n    totalPages: Math.ceil(data.length / limit),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}