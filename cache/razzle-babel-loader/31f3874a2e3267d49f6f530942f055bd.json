{"ast":null,"code":"import { getSearchedRepositories } from 'client/actions/github';\nimport { useAppDispatch } from 'client/_redux/app/store';\nimport { useEffect, useState } from 'react';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const usePagination = (data, limit) => {\n  const {\n    0: activePage,\n    1: setActivePage\n  } = useState(1);\n  const {\n    0: paginatedData,\n    1: setPaginatedData\n  } = useState([]);\n  const {\n    0: keyword,\n    1: setKeyword\n  } = useState('');\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (!keyword) {\n      setPaginatedData(data.slice((activePage - 1) * limit, limit * activePage));\n    } else {\n      dispatch(getSearchedRepositories({\n        q: keyword,\n        page: activePage\n      }));\n      setPaginatedData(data);\n    }\n  }, [activePage, data, keyword]);\n\n  const handleNextPage = (_, props) => {\n    setActivePage(props.activePage);\n  };\n\n  const onSearch = e => {\n    setKeyword(e.target.value);\n  };\n\n  return {\n    paginatedData,\n    handleNextPage,\n    activePage,\n    totalPages: Math.ceil(data.length / limit),\n    onSearch\n  };\n};","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/hooks/usePagination.ts"],"names":["getSearchedRepositories","useAppDispatch","useEffect","useState","usePagination","data","limit","activePage","setActivePage","paginatedData","setPaginatedData","keyword","setKeyword","dispatch","slice","q","page","handleNextPage","_","props","onSearch","e","target","value","totalPages","Math","ceil","length"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,uBAAxC;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA;AACA,OAAO,MAAMC,aAAa,GAAG,CAC3BC,IAD2B,EAE3BC,KAF2B,KASxB;AACH,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BL,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM;AAAA,OAACM,aAAD;AAAA,OAAgBC;AAAhB,MAAoCP,QAAQ,CAAM,EAAN,CAAlD;AACA,QAAM;AAAA,OAACQ,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMU,QAAQ,GAAGZ,cAAc,EAA/B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACS,OAAL,EAAc;AACZD,MAAAA,gBAAgB,CAACL,IAAI,CAACS,KAAL,CAAW,CAACP,UAAU,GAAG,CAAd,IAAmBD,KAA9B,EAAqCA,KAAK,GAAGC,UAA7C,CAAD,CAAhB;AACD,KAFD,MAEO;AACLM,MAAAA,QAAQ,CAACb,uBAAuB,CAAC;AAAEe,QAAAA,CAAC,EAAEJ,OAAL;AAAcK,QAAAA,IAAI,EAAET;AAApB,OAAD,CAAxB,CAAR;AACAG,MAAAA,gBAAgB,CAACL,IAAD,CAAhB;AACD;AACF,GAPQ,EAON,CAACE,UAAD,EAAaF,IAAb,EAAmBM,OAAnB,CAPM,CAAT;;AAQA,QAAMM,cAAc,GAAG,CAACC,CAAD,EAAyCC,KAAzC,KAAoE;AACzFX,IAAAA,aAAa,CAACW,KAAK,CAACZ,UAAP,CAAb;AACD,GAFD;;AAIA,QAAMa,QAAQ,GAAIC,CAAD,IAAY;AAC3BT,IAAAA,UAAU,CAACS,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AACD,GAFD;;AAIA,SAAO;AACLd,IAAAA,aADK;AAELQ,IAAAA,cAFK;AAGLV,IAAAA,UAHK;AAILiB,IAAAA,UAAU,EAAEC,IAAI,CAACC,IAAL,CAAUrB,IAAI,CAACsB,MAAL,GAAcrB,KAAxB,CAJP;AAKLc,IAAAA;AALK,GAAP;AAOD,CAtCM","sourcesContent":["import { getSearchedRepositories } from 'client/actions/github';\nimport { useAppDispatch } from 'client/_redux/app/store';\nimport { useEffect, useState } from 'react';\nimport { PaginationProps } from 'semantic-ui-react';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const usePagination = <T extends Record<string, any>>(\n  data: T[],\n  limit: number,\n): {\n  paginatedData: T[];\n  handleNextPage: (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => void;\n  activePage: number;\n  totalPages: number;\n  onSearch: (e: any) => void;\n} => {\n  const [activePage, setActivePage] = useState(1);\n  const [paginatedData, setPaginatedData] = useState<T[]>([]);\n  const [keyword, setKeyword] = useState('');\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (!keyword) {\n      setPaginatedData(data.slice((activePage - 1) * limit, limit * activePage));\n    } else {\n      dispatch(getSearchedRepositories({ q: keyword, page: activePage }));\n      setPaginatedData(data);\n    }\n  }, [activePage, data, keyword]);\n  const handleNextPage = (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => {\n    setActivePage(props.activePage as number);\n  };\n\n  const onSearch = (e: any) => {\n    setKeyword(e.target.value);\n  };\n\n  return {\n    paginatedData,\n    handleNextPage,\n    activePage,\n    totalPages: Math.ceil(data.length / limit),\n    onSearch,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}