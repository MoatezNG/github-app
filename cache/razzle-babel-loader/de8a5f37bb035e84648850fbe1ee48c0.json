{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getPublicRepositories, getSearchedRepositories } from 'client/actions/github';\nconst initialState = {\n  repositories: [],\n  loading: false\n};\nexport const githubSlice = createSlice({\n  name: 'github',\n  initialState,\n  reducers: {\n    sortByAlphabetic: (state, {\n      payload\n    }) => {\n      switch (payload) {\n        case 'ALPHA':\n          state.repositories = state.repositories.sort((a, b) => a.name.localeCompare(b.name));\n          break;\n\n        default:\n          break;\n      }\n    }\n  },\n  extraReducers: {\n    [getPublicRepositories.pending.type]: state => {\n      state.loading = true;\n    },\n    [getPublicRepositories.fulfilled.type]: (state, {\n      payload\n    }) => {\n      state.repositories = payload;\n      state.loading = false;\n    },\n    [getPublicRepositories.rejected.type]: state => {\n      state.loading = false;\n    },\n    // search\n    [getSearchedRepositories.pending.type]: state => {\n      state.loading = true;\n    },\n    [getSearchedRepositories.fulfilled.type]: (state, {\n      payload\n    }) => {\n      state.repositories = [...payload.items, ...state.repositories];\n      state.loading = false;\n    },\n    [getSearchedRepositories.rejected.type]: state => {\n      state.loading = false;\n      state.repositories = [];\n    }\n  }\n});\nexport const {\n  sortByAlphabetic\n} = githubSlice.actions;\nexport default githubSlice.reducer;","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/_redux/reducers/githubReducer.ts"],"names":["createSlice","getPublicRepositories","getSearchedRepositories","initialState","repositories","loading","githubSlice","name","reducers","sortByAlphabetic","state","payload","sort","a","b","localeCompare","extraReducers","pending","type","fulfilled","rejected","items","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,qBAAT,EAAgCC,uBAAhC,QAA+D,uBAA/D;AAUA,MAAMC,YAAyB,GAAG;AAChCC,EAAAA,YAAY,EAAE,EADkB;AAEhCC,EAAAA,OAAO,EAAE;AAFuB,CAAlC;AAIA,OAAO,MAAMC,WAAW,GAAGN,WAAW,CAAC;AACrCO,EAAAA,IAAI,EAAE,QAD+B;AAErCJ,EAAAA,YAFqC;AAGrCK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,gBAAgB,EAAE,CAACC,KAAD,EAAqB;AAAEC,MAAAA;AAAF,KAArB,KAAmE;AACnF,cAAQA,OAAR;AACE,aAAK,OAAL;AACED,UAAAA,KAAK,CAACN,YAAN,GAAqBM,KAAK,CAACN,YAAN,CAAmBQ,IAAnB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACN,IAAF,CAAOQ,aAAP,CAAqBD,CAAC,CAACP,IAAvB,CAAlC,CAArB;AACA;;AACF;AACE;AALJ;AAOD;AATO,GAH2B;AAcrCS,EAAAA,aAAa,EAAE;AACb,KAACf,qBAAqB,CAACgB,OAAtB,CAA8BC,IAA/B,GAAuCR,KAAD,IAAW;AAC/CA,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD,KAHY;AAIb,KAACJ,qBAAqB,CAACkB,SAAtB,CAAgCD,IAAjC,GAAwC,CACtCR,KADsC,EAEtC;AAAEC,MAAAA;AAAF,KAFsC,KAGnC;AACHD,MAAAA,KAAK,CAACN,YAAN,GAAqBO,OAArB;AACAD,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,KAVY;AAWb,KAACJ,qBAAqB,CAACmB,QAAtB,CAA+BF,IAAhC,GAAwCR,KAAD,IAAW;AAChDA,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,KAbY;AAeb;AACA,KAACH,uBAAuB,CAACe,OAAxB,CAAgCC,IAAjC,GAAyCR,KAAD,IAAW;AACjDA,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD,KAlBY;AAoBb,KAACH,uBAAuB,CAACiB,SAAxB,CAAkCD,IAAnC,GAA0C,CACxCR,KADwC,EAExC;AAAEC,MAAAA;AAAF,KAFwC,KAGrC;AACHD,MAAAA,KAAK,CAACN,YAAN,GAAqB,CAAC,GAAGO,OAAO,CAACU,KAAZ,EAAmB,GAAGX,KAAK,CAACN,YAA5B,CAArB;AACAM,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,KA1BY;AA2Bb,KAACH,uBAAuB,CAACkB,QAAxB,CAAiCF,IAAlC,GAA0CR,KAAD,IAAW;AAClDA,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACAK,MAAAA,KAAK,CAACN,YAAN,GAAqB,EAArB;AACD;AA9BY;AAdsB,CAAD,CAA/B;AA+CP,OAAO,MAAM;AAAEK,EAAAA;AAAF,IAAuBH,WAAW,CAACgB,OAAzC;AAEP,eAAehB,WAAW,CAACiB,OAA3B","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { getPublicRepositories, getSearchedRepositories } from 'client/actions/github';\nimport { SortingValues } from 'client/constants/sortOptions';\nimport { Repository } from 'models/Repository';\nimport { PaginatedResponse } from 'types/utils';\n\nexport type githubSlice = {\n  repositories: Repository[];\n  loading: boolean;\n};\n\nconst initialState: githubSlice = {\n  repositories: [],\n  loading: false,\n};\nexport const githubSlice = createSlice({\n  name: 'github',\n  initialState,\n  reducers: {\n    sortByAlphabetic: (state: githubSlice, { payload }: PayloadAction<SortingValues>) => {\n      switch (payload) {\n        case 'ALPHA':\n          state.repositories = state.repositories.sort((a, b) => a.name.localeCompare(b.name));\n          break;\n        default:\n          break;\n      }\n    },\n  },\n  extraReducers: {\n    [getPublicRepositories.pending.type]: (state) => {\n      state.loading = true;\n    },\n    [getPublicRepositories.fulfilled.type]: (\n      state: githubSlice,\n      { payload }: PayloadAction<Repository[]>,\n    ) => {\n      state.repositories = payload;\n      state.loading = false;\n    },\n    [getPublicRepositories.rejected.type]: (state) => {\n      state.loading = false;\n    },\n\n    // search\n    [getSearchedRepositories.pending.type]: (state) => {\n      state.loading = true;\n    },\n\n    [getSearchedRepositories.fulfilled.type]: (\n      state,\n      { payload }: PayloadAction<PaginatedResponse<Repository>>,\n    ) => {\n      state.repositories = [...payload.items, ...state.repositories];\n      state.loading = false;\n    },\n    [getSearchedRepositories.rejected.type]: (state) => {\n      state.loading = false;\n      state.repositories = [];\n    },\n  },\n});\nexport const { sortByAlphabetic } = githubSlice.actions;\n\nexport default githubSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}