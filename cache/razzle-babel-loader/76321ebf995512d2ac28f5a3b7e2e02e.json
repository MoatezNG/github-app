{"ast":null,"code":"import { getPublicRepositories, getSearchedRepositories } from 'client/_redux/actions/github';\nimport { useAppDispatch } from 'client/_redux/app/store';\nimport { addToFavorites, sortRepositories } from 'client/_redux/reducers/githubReducer';\nimport { useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { useDebounce } from 'client/hooks/useDebounce';\nimport { usePagination } from 'client/hooks/usePagination';\nexport var useRepositoriesList = function useRepositoriesList() {\n  var _useSelector = useSelector(function (state) {\n    return state.githubReducer;\n  }),\n      repositories = _useSelector.repositories,\n      loading = _useSelector.loading;\n\n  var _useState = useState(''),\n      keyword = _useState[0],\n      setKeyword = _useState[1];\n\n  var dispatch = useAppDispatch();\n  useEffect(function () {\n    dispatch(getPublicRepositories());\n  }, []);\n  var debounceSearchTerm = useDebounce(keyword, 500);\n  useEffect(function () {\n    if (!debounceSearchTerm) return;\n    dispatch(getSearchedRepositories({\n      q: debounceSearchTerm\n    }));\n  }, [debounceSearchTerm]);\n\n  var _usePagination = usePagination(repositories, 30),\n      paginatedData = _usePagination.paginatedData,\n      handleNextPage = _usePagination.handleNextPage,\n      activePage = _usePagination.activePage,\n      totalPages = _usePagination.totalPages,\n      resetPage = _usePagination.resetPage;\n\n  var onSearch = function onSearch(event) {\n    resetPage();\n    setKeyword(event.target.value);\n  };\n\n  var onSort = function onSort(_, data) {\n    resetPage();\n    dispatch(sortRepositories(data.value));\n  };\n\n  var onMarkRepository = function onMarkRepository(id) {\n    dispatch(addToFavorites(id));\n  };\n\n  return {\n    onSearch: onSearch,\n    onSort: onSort,\n    onMarkRepository: onMarkRepository,\n    paginatedData: paginatedData,\n    handleNextPage: handleNextPage,\n    activePage: activePage,\n    totalPages: totalPages,\n    loading: loading\n  };\n};","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/containers/RepositoriesList/useRepositoriesList.ts"],"names":["getPublicRepositories","getSearchedRepositories","useAppDispatch","addToFavorites","sortRepositories","useSelector","useEffect","useState","useDebounce","usePagination","useRepositoriesList","state","githubReducer","repositories","loading","keyword","setKeyword","dispatch","debounceSearchTerm","q","paginatedData","handleNextPage","activePage","totalPages","resetPage","onSearch","event","target","value","onSort","_","data","onMarkRepository","id"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,uBAAhC,QAA+D,8BAA/D;AACA,SAAoBC,cAApB,QAA0C,yBAA1C;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,sCAAjD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAKA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AACvC,qBAAkCL,WAAW,CAAC,UAACM,KAAD;AAAA,WAAsBA,KAAK,CAACC,aAA5B;AAAA,GAAD,CAA7C;AAAA,MAAQC,YAAR,gBAAQA,YAAR;AAAA,MAAsBC,OAAtB,gBAAsBA,OAAtB;;AACA,kBAA8BP,QAAQ,CAAC,EAAD,CAAtC;AAAA,MAAOQ,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAMC,QAAQ,GAAGf,cAAc,EAA/B;AACAI,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,QAAQ,CAACjB,qBAAqB,EAAtB,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,MAAMkB,kBAAkB,GAAGV,WAAW,CAACO,OAAD,EAAU,GAAV,CAAtC;AAEAT,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACY,kBAAL,EAAyB;AACzBD,IAAAA,QAAQ,CAAChB,uBAAuB,CAAC;AAAEkB,MAAAA,CAAC,EAAED;AAAL,KAAD,CAAxB,CAAR;AACD,GAHQ,EAGN,CAACA,kBAAD,CAHM,CAAT;;AAKA,uBAA6ET,aAAa,CAAaI,YAAb,EAA2B,EAA3B,CAA1F;AAAA,MAAQO,aAAR,kBAAQA,aAAR;AAAA,MAAuBC,cAAvB,kBAAuBA,cAAvB;AAAA,MAAuCC,UAAvC,kBAAuCA,UAAvC;AAAA,MAAmDC,UAAnD,kBAAmDA,UAAnD;AAAA,MAA+DC,SAA/D,kBAA+DA,SAA/D;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAgD;AAC/DF,IAAAA,SAAS;AACTR,IAAAA,UAAU,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACD,GAHD;;AAIA,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,CAAD,EAA8CC,IAA9C,EAAsE;AACnFP,IAAAA,SAAS;AACTP,IAAAA,QAAQ,CAACb,gBAAgB,CAAC2B,IAAI,CAACH,KAAN,CAAjB,CAAR;AACD,GAHD;;AAKA,MAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,EAAD,EAAgB;AACvChB,IAAAA,QAAQ,CAACd,cAAc,CAAC8B,EAAD,CAAf,CAAR;AACD,GAFD;;AAIA,SAAO;AACLR,IAAAA,QAAQ,EAARA,QADK;AAELI,IAAAA,MAAM,EAANA,MAFK;AAGLG,IAAAA,gBAAgB,EAAhBA,gBAHK;AAILZ,IAAAA,aAAa,EAAbA,aAJK;AAKLC,IAAAA,cAAc,EAAdA,cALK;AAMLC,IAAAA,UAAU,EAAVA,UANK;AAOLC,IAAAA,UAAU,EAAVA,UAPK;AAQLT,IAAAA,OAAO,EAAPA;AARK,GAAP;AAUD,CAvCM","sourcesContent":["import { getPublicRepositories, getSearchedRepositories } from 'client/_redux/actions/github';\nimport { RootState, useAppDispatch } from 'client/_redux/app/store';\nimport { addToFavorites, sortRepositories } from 'client/_redux/reducers/githubReducer';\nimport { useSelector } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport { useDebounce } from 'client/hooks/useDebounce';\nimport { usePagination } from 'client/hooks/usePagination';\nimport { DropdownProps } from 'semantic-ui-react';\nimport { SortingValues } from 'client/constants/sortOptions';\nimport { Repository } from 'models/Repository';\n\nexport const useRepositoriesList = () => {\n  const { repositories, loading } = useSelector((state: RootState) => state.githubReducer);\n  const [keyword, setKeyword] = useState('');\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(getPublicRepositories());\n  }, []);\n  const debounceSearchTerm = useDebounce(keyword, 500);\n\n  useEffect(() => {\n    if (!debounceSearchTerm) return;\n    dispatch(getSearchedRepositories({ q: debounceSearchTerm }));\n  }, [debounceSearchTerm]);\n\n  const { paginatedData, handleNextPage, activePage, totalPages, resetPage } = usePagination<Repository>(repositories, 30);\n\n  const onSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    resetPage();\n    setKeyword(event.target.value);\n  };\n  const onSort = (_: React.SyntheticEvent<HTMLElement, Event>, data: DropdownProps) => {\n    resetPage();\n    dispatch(sortRepositories(data.value as SortingValues));\n  };\n\n  const onMarkRepository = (id: number) => {\n    dispatch(addToFavorites(id));\n  };\n\n  return {\n    onSearch,\n    onSort,\n    onMarkRepository,\n    paginatedData,\n    handleNextPage,\n    activePage,\n    totalPages,\n    loading,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}