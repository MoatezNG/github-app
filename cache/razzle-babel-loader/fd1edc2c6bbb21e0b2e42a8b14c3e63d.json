{"ast":null,"code":"import { getPublicRepositories } from 'client/actions/github';\nimport { useAppDispatch } from 'client/_redux/app/store';\nimport { useEffect, useState } from 'react';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const usePagination = (data, limit) => {\n  const dispatch = useAppDispatch();\n  const {\n    0: activePage,\n    1: setActivePage\n  } = useState(1);\n  const {\n    0: paginatedData,\n    1: setPaginatedData\n  } = useState([]);\n  useEffect(() => {\n    dispatch(getPublicRepositories());\n  }, []);\n  useEffect(() => {\n    setPaginatedData(data.slice((activePage - 1) * limit, limit * activePage));\n  }, [activePage, data]);\n\n  const handleNextPage = (_, props) => {\n    setActivePage(props.activePage);\n  };\n\n  return {\n    paginatedData,\n    handleNextPage,\n    activePage,\n    totalPages: Math.ceil(data.length / limit)\n  };\n};","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/hooks/usePagination.ts"],"names":["getPublicRepositories","useAppDispatch","useEffect","useState","usePagination","data","limit","dispatch","activePage","setActivePage","paginatedData","setPaginatedData","slice","handleNextPage","_","props","totalPages","Math","ceil","length"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,uBAAtC;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA;AACA,OAAO,MAAMC,aAAa,GAAG,CAC3BC,IAD2B,EAE3BC,KAF2B,KAQxB;AACH,QAAMC,QAAQ,GAAGN,cAAc,EAA/B;AACA,QAAM;AAAA,OAACO,UAAD;AAAA,OAAaC;AAAb,MAA8BN,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM;AAAA,OAACO,aAAD;AAAA,OAAgBC;AAAhB,MAAoCR,QAAQ,CAAM,EAAN,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,QAAQ,CAACP,qBAAqB,EAAtB,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAE,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,gBAAgB,CAACN,IAAI,CAACO,KAAL,CAAW,CAACJ,UAAU,GAAG,CAAd,IAAmBF,KAA9B,EAAqCA,KAAK,GAAGE,UAA7C,CAAD,CAAhB;AACD,GAFQ,EAEN,CAACA,UAAD,EAAaH,IAAb,CAFM,CAAT;;AAGA,QAAMQ,cAAc,GAAG,CAACC,CAAD,EAAyCC,KAAzC,KAAoE;AACzFN,IAAAA,aAAa,CAACM,KAAK,CAACP,UAAP,CAAb;AACD,GAFD;;AAIA,SAAO;AACLE,IAAAA,aADK;AAELG,IAAAA,cAFK;AAGLL,IAAAA,UAHK;AAILQ,IAAAA,UAAU,EAAEC,IAAI,CAACC,IAAL,CAAUb,IAAI,CAACc,MAAL,GAAcb,KAAxB;AAJP,GAAP;AAMD,CA9BM","sourcesContent":["import { getPublicRepositories } from 'client/actions/github';\nimport { useAppDispatch } from 'client/_redux/app/store';\nimport { useEffect, useState } from 'react';\nimport { PaginationProps } from 'semantic-ui-react';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const usePagination = <T extends Record<string, any>>(\n  data: T[],\n  limit: number,\n): {\n  paginatedData: T[];\n  handleNextPage: (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => void;\n  activePage: number;\n  totalPages: number;\n} => {\n  const dispatch = useAppDispatch();\n  const [activePage, setActivePage] = useState(1);\n  const [paginatedData, setPaginatedData] = useState<T[]>([]);\n\n  useEffect(() => {\n    dispatch(getPublicRepositories());\n  }, []);\n\n  useEffect(() => {\n    setPaginatedData(data.slice((activePage - 1) * limit, limit * activePage));\n  }, [activePage, data]);\n  const handleNextPage = (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => {\n    setActivePage(props.activePage as number);\n  };\n\n  return {\n    paginatedData,\n    handleNextPage,\n    activePage,\n    totalPages: Math.ceil(data.length / limit),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}