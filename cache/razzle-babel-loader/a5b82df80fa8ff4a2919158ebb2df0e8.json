{"ast":null,"code":"import { useState } from 'react';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const usePagination = (limit, data) => {\n  const {\n    0: activePage,\n    1: setActivePage\n  } = useState(1);\n\n  const handleNextPage = (_, props) => {\n    setActivePage(props.activePage);\n  };\n\n  return {\n    handleNextPage,\n    activePage\n  };\n};","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/hooks/usePagination.ts"],"names":["useState","usePagination","limit","data","activePage","setActivePage","handleNextPage","_","props"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AAIA;AACA,OAAO,MAAMC,aAAa,GAAG,CAC3BC,KAD2B,EAE3BC,IAF2B,KAMxB;AACH,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BL,QAAQ,CAAC,CAAD,CAA5C;;AAEA,QAAMM,cAAc,GAAG,CAACC,CAAD,EAAyCC,KAAzC,KAAoE;AACzFH,IAAAA,aAAa,CAACG,KAAK,CAACJ,UAAP,CAAb;AACD,GAFD;;AAIA,SAAO;AACLE,IAAAA,cADK;AAELF,IAAAA;AAFK,GAAP;AAID,CAjBM","sourcesContent":["import { useState } from 'react';\nimport { PaginationProps } from 'semantic-ui-react';\nimport { PaginatedResponse } from 'types/utils';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const usePagination = <T extends Record<string, any>>(\n  limit: number,\n  data?: PaginatedResponse<T>,\n): {\n  handleNextPage: (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => void;\n  activePage: number;\n} => {\n  const [activePage, setActivePage] = useState(1);\n\n  const handleNextPage = (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => {\n    setActivePage(props.activePage as number);\n  };\n\n  return {\n    handleNextPage,\n    activePage,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}