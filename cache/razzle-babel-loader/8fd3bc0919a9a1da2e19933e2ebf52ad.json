{"ast":null,"code":"import { useEffect, useState } from 'react';\nexport var usePagination = function usePagination(data, limit) {\n  var _useState = useState({\n    activePage: 1\n  }),\n      paginationInfo = _useState[0],\n      setPaginationInfo = _useState[1];\n\n  var _useState2 = useState([]),\n      paginatedData = _useState2[0],\n      setPaginatedData = _useState2[1];\n\n  useEffect(function () {\n    setPaginatedData(data.slice((activePage - 1) * limit, limit * activePage));\n  }, [activePage, data]);\n\n  var handleNextPage = function handleNextPage(_, props) {\n    setActivePage(props.activePage);\n  };\n\n  return {\n    paginatedData: paginatedData,\n    handleNextPage: handleNextPage,\n    activePage: activePage\n  };\n};","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/hooks/usePagination.ts"],"names":["useEffect","useState","usePagination","data","limit","activePage","paginationInfo","setPaginationInfo","paginatedData","setPaginatedData","slice","handleNextPage","_","props","setActivePage"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAC3BC,IAD2B,EAE3BC,KAF2B,EAOxB;AACH,kBAA4CH,QAAQ,CAA2B;AAC7EI,IAAAA,UAAU,EAAE;AADiE,GAA3B,CAApD;AAAA,MAAOC,cAAP;AAAA,MAAuBC,iBAAvB;;AAGA,mBAA0CN,QAAQ,CAAM,EAAN,CAAlD;AAAA,MAAOO,aAAP;AAAA,MAAsBC,gBAAtB;;AAEAT,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,gBAAgB,CAACN,IAAI,CAACO,KAAL,CAAW,CAACL,UAAU,GAAG,CAAd,IAAmBD,KAA9B,EAAqCA,KAAK,GAAGC,UAA7C,CAAD,CAAhB;AACD,GAFQ,EAEN,CAACA,UAAD,EAAaF,IAAb,CAFM,CAAT;;AAGA,MAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAACC,CAAD,EAAyCC,KAAzC,EAAoE;AACzFC,IAAAA,aAAa,CAACD,KAAK,CAACR,UAAP,CAAb;AACD,GAFD;;AAIA,SAAO;AAAEG,IAAAA,aAAa,EAAbA,aAAF;AAAiBG,IAAAA,cAAc,EAAdA,cAAjB;AAAiCN,IAAAA,UAAU,EAAVA;AAAjC,GAAP;AACD,CArBM","sourcesContent":["import { useEffect, useState } from 'react';\nimport { PaginationProps } from 'semantic-ui-react';\n\nexport const usePagination = <T extends Record<string, any>>(\n  data: T[],\n  limit: number,\n): {\n  paginatedData: T[];\n  handleNextPage: (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => void;\n  activePage: number;\n} => {\n  const [paginationInfo, setPaginationInfo] = useState<Partial<PaginationProps>>({\n    activePage: 1,\n  });\n  const [paginatedData, setPaginatedData] = useState<T[]>([]);\n\n  useEffect(() => {\n    setPaginatedData(data.slice((activePage - 1) * limit, limit * activePage));\n  }, [activePage, data]);\n  const handleNextPage = (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => {\n    setActivePage(props.activePage as number);\n  };\n\n  return { paginatedData, handleNextPage, activePage };\n};\n"]},"metadata":{},"sourceType":"module"}