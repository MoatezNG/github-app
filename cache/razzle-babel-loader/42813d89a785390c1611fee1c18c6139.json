{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport { getPublicRepositories, getSearchedRepositories } from 'client/actions/github';\nconst initialState = {\n  repositories: [],\n  loading: false\n};\nexport const githubSlice = createSlice({\n  name: 'github',\n  initialState,\n  reducers: {\n    sortByAlphabetic: (state, {\n      payload\n    }) => {\n      switch (payload) {\n        case 'ALPHA':\n          state.repositories = state.repositories.sort((a, b) => a.name.localeCompare(b.name));\n          break;\n\n        case 'FAVORITES':\n          state.repositories = state.repositories.sort((a, b) => a.name.localeCompare(b.name));\n          break;\n\n        default:\n          break;\n      }\n    },\n    addToFavorites: (state, {\n      payload\n    }) => {\n      state.repositories = state.repositories.map(el => el.id === payload ? _objectSpread(_objectSpread({}, el), {}, {\n        marked: !el.marked\n      }) : el);\n    }\n  },\n  extraReducers: {\n    [getPublicRepositories.pending.type]: state => {\n      state.loading = true;\n    },\n    [getPublicRepositories.fulfilled.type]: (state, {\n      payload\n    }) => {\n      state.repositories = payload;\n      state.loading = false;\n    },\n    [getPublicRepositories.rejected.type]: state => {\n      state.loading = false;\n    },\n    // search\n    [getSearchedRepositories.pending.type]: state => {\n      state.loading = true;\n    },\n    [getSearchedRepositories.fulfilled.type]: (state, {\n      payload\n    }) => {\n      state.repositories = [...payload.items, ...state.repositories];\n      state.loading = false;\n    },\n    [getSearchedRepositories.rejected.type]: state => {\n      state.loading = false;\n      state.repositories = [];\n    }\n  }\n});\nexport const {\n  sortByAlphabetic,\n  addToFavorites\n} = githubSlice.actions;\nexport default githubSlice.reducer;","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/_redux/reducers/githubReducer.ts"],"names":["createSlice","getPublicRepositories","getSearchedRepositories","initialState","repositories","loading","githubSlice","name","reducers","sortByAlphabetic","state","payload","sort","a","b","localeCompare","addToFavorites","map","el","id","marked","extraReducers","pending","type","fulfilled","rejected","items","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { getPublicRepositories, getSearchedRepositories } from 'client/actions/github';\nimport { SortingValues } from 'client/constants/sortOptions';\nimport { Repository } from 'models/Repository';\nimport { PaginatedResponse } from 'types/utils';\n\nexport type githubSlice = {\n  repositories: Repository[];\n  loading: boolean;\n};\n\nconst initialState: githubSlice = {\n  repositories: [],\n  loading: false,\n};\nexport const githubSlice = createSlice({\n  name: 'github',\n  initialState,\n  reducers: {\n    sortByAlphabetic: (state: githubSlice, { payload }: PayloadAction<SortingValues>) => {\n      switch (payload) {\n        case 'ALPHA':\n          state.repositories = state.repositories.sort((a, b) => a.name.localeCompare(b.name));\n          break;\n        case 'FAVORITES':\n          state.repositories = state.repositories.sort((a, b) => a.name.localeCompare(b.name));\n          break;\n        default:\n          break;\n      }\n    },\n    addToFavorites: (state: githubSlice, { payload }: PayloadAction<number>) => {\n      state.repositories = state.repositories.map((el) =>\n        el.id === payload ? { ...el, marked: !el.marked } : el,\n      );\n    },\n  },\n  extraReducers: {\n    [getPublicRepositories.pending.type]: (state) => {\n      state.loading = true;\n    },\n    [getPublicRepositories.fulfilled.type]: (\n      state: githubSlice,\n      { payload }: PayloadAction<Repository[]>,\n    ) => {\n      state.repositories = payload;\n      state.loading = false;\n    },\n    [getPublicRepositories.rejected.type]: (state) => {\n      state.loading = false;\n    },\n\n    // search\n    [getSearchedRepositories.pending.type]: (state) => {\n      state.loading = true;\n    },\n\n    [getSearchedRepositories.fulfilled.type]: (\n      state,\n      { payload }: PayloadAction<PaginatedResponse<Repository>>,\n    ) => {\n      state.repositories = [...payload.items, ...state.repositories];\n      state.loading = false;\n    },\n    [getSearchedRepositories.rejected.type]: (state) => {\n      state.loading = false;\n      state.repositories = [];\n    },\n  },\n});\nexport const { sortByAlphabetic, addToFavorites } = githubSlice.actions;\n\nexport default githubSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}