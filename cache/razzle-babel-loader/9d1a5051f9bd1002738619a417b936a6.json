{"ast":null,"code":"import { getSearchedRepositories } from 'client/actions/github';\nimport { useEffect, useState } from 'react';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const usePagination = (data, limit) => {\n  const {\n    0: activePage,\n    1: setActivePage\n  } = useState(1);\n  const {\n    0: paginatedData,\n    1: setPaginatedData\n  } = useState([]);\n  const {\n    0: keyword,\n    1: setKeyword\n  } = useState('');\n  useEffect(() => {\n    if (!keyword) {\n      setPaginatedData(data.slice((activePage - 1) * limit, limit * activePage));\n    }\n\n    getSearchedRepositories({\n      q: keyword,\n      page: activePage\n    }); // setPaginatedData(data);\n  }, [activePage, data, keyword]);\n\n  const handleNextPage = (_, props) => {\n    setActivePage(props.activePage);\n  };\n\n  const onSearch = e => {\n    setKeyword(e.target.value);\n  };\n\n  return {\n    paginatedData,\n    handleNextPage,\n    activePage,\n    totalPages: Math.ceil(data.length / limit),\n    onSearch\n  };\n};","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/hooks/usePagination.ts"],"names":["getSearchedRepositories","useEffect","useState","usePagination","data","limit","activePage","setActivePage","paginatedData","setPaginatedData","keyword","setKeyword","slice","q","page","handleNextPage","_","props","onSearch","e","target","value","totalPages","Math","ceil","length"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,uBAAxC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA;AACA,OAAO,MAAMC,aAAa,GAAG,CAC3BC,IAD2B,EAE3BC,KAF2B,KASxB;AACH,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BL,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM;AAAA,OAACM,aAAD;AAAA,OAAgBC;AAAhB,MAAoCP,QAAQ,CAAM,EAAN,CAAlD;AACA,QAAM;AAAA,OAACQ,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACS,OAAL,EAAc;AACZD,MAAAA,gBAAgB,CAACL,IAAI,CAACQ,KAAL,CAAW,CAACN,UAAU,GAAG,CAAd,IAAmBD,KAA9B,EAAqCA,KAAK,GAAGC,UAA7C,CAAD,CAAhB;AACD;;AACDN,IAAAA,uBAAuB,CAAC;AAAEa,MAAAA,CAAC,EAAEH,OAAL;AAAcI,MAAAA,IAAI,EAAER;AAApB,KAAD,CAAvB,CAJc,CAKd;AACD,GANQ,EAMN,CAACA,UAAD,EAAaF,IAAb,EAAmBM,OAAnB,CANM,CAAT;;AAOA,QAAMK,cAAc,GAAG,CAACC,CAAD,EAAyCC,KAAzC,KAAoE;AACzFV,IAAAA,aAAa,CAACU,KAAK,CAACX,UAAP,CAAb;AACD,GAFD;;AAIA,QAAMY,QAAQ,GAAIC,CAAD,IAAY;AAC3BR,IAAAA,UAAU,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AACD,GAFD;;AAIA,SAAO;AACLb,IAAAA,aADK;AAELO,IAAAA,cAFK;AAGLT,IAAAA,UAHK;AAILgB,IAAAA,UAAU,EAAEC,IAAI,CAACC,IAAL,CAAUpB,IAAI,CAACqB,MAAL,GAAcpB,KAAxB,CAJP;AAKLa,IAAAA;AALK,GAAP;AAOD,CAnCM","sourcesContent":["import { getSearchedRepositories } from 'client/actions/github';\nimport { useEffect, useState } from 'react';\nimport { PaginationProps } from 'semantic-ui-react';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const usePagination = <T extends Record<string, any>>(\n  data: T[],\n  limit: number,\n): {\n  paginatedData: T[];\n  handleNextPage: (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => void;\n  activePage: number;\n  totalPages: number;\n  onSearch: (e: any) => void;\n} => {\n  const [activePage, setActivePage] = useState(1);\n  const [paginatedData, setPaginatedData] = useState<T[]>([]);\n  const [keyword, setKeyword] = useState('');\n  useEffect(() => {\n    if (!keyword) {\n      setPaginatedData(data.slice((activePage - 1) * limit, limit * activePage));\n    }\n    getSearchedRepositories({ q: keyword, page: activePage });\n    // setPaginatedData(data);\n  }, [activePage, data, keyword]);\n  const handleNextPage = (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => {\n    setActivePage(props.activePage as number);\n  };\n\n  const onSearch = (e: any) => {\n    setKeyword(e.target.value);\n  };\n\n  return {\n    paginatedData,\n    handleNextPage,\n    activePage,\n    totalPages: Math.ceil(data.length / limit),\n    onSearch,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}