{"ast":null,"code":"import _defineProperty from \"C:/Users/moate/OneDrive/Desktop/Tests/github-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:/Users/moate/OneDrive/Desktop/Tests/github-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _extraReducers;\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport { getPublicRepositories, getSearchedRepositories } from 'client/actions/github';\nvar initialState = {\n  repositories: [],\n  loading: false\n};\nexport var githubSlice = createSlice({\n  name: 'github',\n  initialState: initialState,\n  reducers: {\n    sortByAlphabetic: function sortByAlphabetic(state, args) {\n      state.repositories = state.repositories.sort(function (a, b) {\n        return a.name.localeCompare(b.name);\n      });\n    }\n  },\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, getPublicRepositories.pending.type, function (state) {\n    state.loading = true;\n  }), _defineProperty(_extraReducers, getPublicRepositories.fulfilled.type, function (state, _ref) {\n    var payload = _ref.payload;\n    state.repositories = payload;\n    state.loading = false;\n  }), _defineProperty(_extraReducers, getPublicRepositories.rejected.type, function (state) {\n    state.loading = false;\n  }), _defineProperty(_extraReducers, getSearchedRepositories.pending.type, function (state) {\n    state.loading = true;\n  }), _defineProperty(_extraReducers, getSearchedRepositories.fulfilled.type, function (state, _ref2) {\n    var payload = _ref2.payload;\n    state.repositories = [].concat(_toConsumableArray(payload.items), _toConsumableArray(state.repositories));\n    state.loading = false;\n  }), _defineProperty(_extraReducers, getSearchedRepositories.rejected.type, function (state) {\n    state.loading = false;\n    state.repositories = [];\n  }), _extraReducers)\n});\nvar sortByAlphabetic = githubSlice.actions.sortByAlphabetic;\nexport { sortByAlphabetic };\nexport default githubSlice.reducer;","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/_redux/reducers/githubReducer.ts"],"names":["createSlice","getPublicRepositories","getSearchedRepositories","initialState","repositories","loading","githubSlice","name","reducers","sortByAlphabetic","state","args","sort","a","b","localeCompare","extraReducers","pending","type","fulfilled","payload","rejected","items","actions","reducer"],"mappings":";;;;;AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,qBAAT,EAAgCC,uBAAhC,QAA+D,uBAA/D;AASA,IAAMC,YAAyB,GAAG;AAChCC,EAAAA,YAAY,EAAE,EADkB;AAEhCC,EAAAA,OAAO,EAAE;AAFuB,CAAlC;AAIA,OAAO,IAAMC,WAAW,GAAGN,WAAW,CAAC;AACrCO,EAAAA,IAAI,EAAE,QAD+B;AAErCJ,EAAAA,YAAY,EAAZA,YAFqC;AAGrCK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,gBAAgB,EAAE,0BAACC,KAAD,EAAqBC,IAArB,EAA8B;AAC9CD,MAAAA,KAAK,CAACN,YAAN,GAAqBM,KAAK,CAACN,YAAN,CAAmBQ,IAAnB,CAAwB,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUD,CAAC,CAACN,IAAF,CAAOQ,aAAP,CAAqBD,CAAC,CAACP,IAAvB,CAAV;AAAA,OAAxB,CAArB;AACD;AAHO,GAH2B;AAQrCS,EAAAA,aAAa,wDACVf,qBAAqB,CAACgB,OAAtB,CAA8BC,IADpB,EAC2B,UAACR,KAAD,EAAW;AAC/CA,IAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD,GAHU,mCAIVJ,qBAAqB,CAACkB,SAAtB,CAAgCD,IAJtB,EAI6B,UACtCR,KADsC,QAGnC;AAAA,QADDU,OACC,QADDA,OACC;AACHV,IAAAA,KAAK,CAACN,YAAN,GAAqBgB,OAArB;AACAV,IAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,GAVU,mCAWVJ,qBAAqB,CAACoB,QAAtB,CAA+BH,IAXrB,EAW4B,UAACR,KAAD,EAAW;AAChDA,IAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,GAbU,mCAgBVH,uBAAuB,CAACe,OAAxB,CAAgCC,IAhBtB,EAgB6B,UAACR,KAAD,EAAW;AACjDA,IAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD,GAlBU,mCAoBVH,uBAAuB,CAACiB,SAAxB,CAAkCD,IApBxB,EAoB+B,UACxCR,KADwC,SAGrC;AAAA,QADDU,OACC,SADDA,OACC;AACHV,IAAAA,KAAK,CAACN,YAAN,gCAAyBgB,OAAO,CAACE,KAAjC,sBAA2CZ,KAAK,CAACN,YAAjD;AACAM,IAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,GA1BU,mCA2BVH,uBAAuB,CAACmB,QAAxB,CAAiCH,IA3BvB,EA2B8B,UAACR,KAAD,EAAW;AAClDA,IAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACAK,IAAAA,KAAK,CAACN,YAAN,GAAqB,EAArB;AACD,GA9BU;AARwB,CAAD,CAA/B;AAyCA,IAAQK,gBAAR,GAA6BH,WAAW,CAACiB,OAAzC,CAAQd,gBAAR;;AAEP,eAAeH,WAAW,CAACkB,OAA3B","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { getPublicRepositories, getSearchedRepositories } from 'client/actions/github';\nimport { Repository } from 'models/Repository';\nimport { PaginatedResponse } from 'types/utils';\n\nexport type githubSlice = {\n  repositories: Repository[];\n  loading: boolean;\n};\n\nconst initialState: githubSlice = {\n  repositories: [],\n  loading: false,\n};\nexport const githubSlice = createSlice({\n  name: 'github',\n  initialState,\n  reducers: {\n    sortByAlphabetic: (state: githubSlice, args) => {\n      state.repositories = state.repositories.sort((a, b) => a.name.localeCompare(b.name));\n    },\n  },\n  extraReducers: {\n    [getPublicRepositories.pending.type]: (state) => {\n      state.loading = true;\n    },\n    [getPublicRepositories.fulfilled.type]: (\n      state: githubSlice,\n      { payload }: PayloadAction<Repository[]>,\n    ) => {\n      state.repositories = payload;\n      state.loading = false;\n    },\n    [getPublicRepositories.rejected.type]: (state) => {\n      state.loading = false;\n    },\n\n    // search\n    [getSearchedRepositories.pending.type]: (state) => {\n      state.loading = true;\n    },\n\n    [getSearchedRepositories.fulfilled.type]: (\n      state,\n      { payload }: PayloadAction<PaginatedResponse<Repository>>,\n    ) => {\n      state.repositories = [...payload.items, ...state.repositories];\n      state.loading = false;\n    },\n    [getSearchedRepositories.rejected.type]: (state) => {\n      state.loading = false;\n      state.repositories = [];\n    },\n  },\n});\nexport const { sortByAlphabetic } = githubSlice.actions;\n\nexport default githubSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}