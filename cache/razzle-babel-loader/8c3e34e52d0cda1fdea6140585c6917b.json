{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getSearchedRepositories } from 'client/actions/github';\nconst initialState = {\n  repositories: [],\n  loading: false\n};\nexport const countSlice = createSlice({\n  name: 'github',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [getSearchedRepositories.pending.type]: state => {\n      state.loading = true;\n    },\n    [getSearchedRepositories.fulfilled.type]: (state, {\n      payload\n    }) => {\n      state.repositories = payload.items;\n      state.loading = false;\n    },\n    [getSearchedRepositories.rejected.type]: state => {\n      state.loading = false;\n    }\n  }\n});\nexport default countSlice.reducer;","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/_redux/reducers/githubReducer.ts"],"names":["createSlice","getSearchedRepositories","initialState","repositories","loading","countSlice","name","reducers","extraReducers","pending","type","state","fulfilled","payload","items","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAAgCC,uBAAhC,QAA+D,uBAA/D;AASA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,YAAY,EAAE,EADiB;AAE/BC,EAAAA,OAAO,EAAE;AAFsB,CAAjC;AAIA,OAAO,MAAMC,UAAU,GAAGL,WAAW,CAAC;AACpCM,EAAAA,IAAI,EAAE,QAD8B;AAEpCJ,EAAAA,YAFoC;AAGpCK,EAAAA,QAAQ,EAAE,EAH0B;AAIpCC,EAAAA,aAAa,EAAE;AACb,KAACP,uBAAuB,CAACQ,OAAxB,CAAgCC,IAAjC,GAAyCC,KAAD,IAAW;AACjDA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACD,KAHY;AAKb,KAACH,uBAAuB,CAACW,SAAxB,CAAkCF,IAAnC,GAA0C,CACxCC,KADwC,EAExC;AAAEE,MAAAA;AAAF,KAFwC,KAGrC;AACHF,MAAAA,KAAK,CAACR,YAAN,GAAqBU,OAAO,CAACC,KAA7B;AACAH,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACD,KAXY;AAYb,KAACH,uBAAuB,CAACc,QAAxB,CAAiCL,IAAlC,GAA0CC,KAAD,IAAW;AAClDA,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACD;AAdY;AAJqB,CAAD,CAA9B;AAsBP,eAAeC,UAAU,CAACW,OAA1B","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { getPublicRepositories, getSearchedRepositories } from 'client/actions/github';\nimport { Repository } from 'models/Repository';\nimport { PaginatedResponse } from 'types/utils';\n\nexport type countState = {\n  repositories: Repository[];\n  loading: boolean;\n};\n\nconst initialState: countState = {\n  repositories: [],\n  loading: false,\n};\nexport const countSlice = createSlice({\n  name: 'github',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [getSearchedRepositories.pending.type]: (state) => {\n      state.loading = true;\n    },\n\n    [getSearchedRepositories.fulfilled.type]: (\n      state,\n      { payload }: PayloadAction<PaginatedResponse<Repository>>,\n    ) => {\n      state.repositories = payload.items;\n      state.loading = false;\n    },\n    [getSearchedRepositories.rejected.type]: (state) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport default countSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}