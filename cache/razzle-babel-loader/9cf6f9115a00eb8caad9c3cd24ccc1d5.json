{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { githubApi } from 'api';\nconst BASE_URL = '/repositories';\nexport const getPublicRepositories = async () => {\n  const response = await githubApi.get(BASE_URL);\n  return response.data;\n};\nexport const getSearchedRepositories = async params => {\n  const response = await githubApi.get(`/search${BASE_URL}`, {\n    params: _objectSpread(_objectSpread({}, params), {}, {\n      per_page: 100\n    })\n  });\n  return response.data;\n};","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/services/github.ts"],"names":["githubApi","BASE_URL","getPublicRepositories","response","get","data","getSearchedRepositories","params","per_page"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,KAA1B;AAIA,MAAMC,QAAQ,GAAG,eAAjB;AACA,OAAO,MAAMC,qBAAqB,GAAG,YAAY;AAC/C,QAAMC,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAV,CAA4BH,QAA5B,CAAvB;AACA,SAAOE,QAAQ,CAACE,IAAhB;AACD,CAHM;AAKP,OAAO,MAAMC,uBAAuB,GAAG,MAAOC,MAAP,IAAgC;AACrE,QAAMJ,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAV,CAA8C,UAASH,QAAS,EAAhE,EAAmE;AACxFM,IAAAA,MAAM,kCACDA,MADC;AAEJC,MAAAA,QAAQ,EAAE;AAFN;AADkF,GAAnE,CAAvB;AAMA,SAAOL,QAAQ,CAACE,IAAhB;AACD,CARM","sourcesContent":["import { githubApi } from 'api';\nimport { Repository } from 'models/Repository';\nimport { PaginatedResponse, searchParams } from 'types/utils';\n\nconst BASE_URL = '/repositories';\nexport const getPublicRepositories = async () => {\n  const response = await githubApi.get<Repository[]>(BASE_URL);\n  return response.data;\n};\n\nexport const getSearchedRepositories = async (params: searchParams) => {\n  const response = await githubApi.get<PaginatedResponse<Repository>>(`/search${BASE_URL}`, {\n    params: {\n      ...params,\n      per_page: 100,\n    },\n  });\n  return response.data;\n};\n"]},"metadata":{},"sourceType":"module"}