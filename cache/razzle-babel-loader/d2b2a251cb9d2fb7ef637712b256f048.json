{"ast":null,"code":"import { getPublicRepositories, getSearchedRepositories } from 'client/_redux/actions/github';\nimport { useAppDispatch } from 'client/_redux/app/store';\nimport { addToFavorites, sortRepositories } from 'client/_redux/reducers/githubReducer';\nimport { useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { useDebounce } from 'client/hooks/useDebounce';\nimport { usePagination } from 'client/hooks/usePagination';\nexport const useRepositoriesList = () => {\n  const {\n    repositories,\n    loading\n  } = useSelector(state => state.githubReducer);\n  const {\n    0: keyword,\n    1: setKeyword\n  } = useState('');\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(getPublicRepositories());\n  }, []);\n  const debounceSearchTerm = useDebounce(keyword, 500);\n  useEffect(() => {\n    if (!debounceSearchTerm) return;\n    dispatch(getSearchedRepositories({\n      q: debounceSearchTerm\n    }));\n  }, [debounceSearchTerm]);\n  const {\n    paginatedData,\n    handleNextPage,\n    activePage,\n    totalPages,\n    resetPage\n  } = usePagination(repositories, 30);\n\n  const onSearch = event => {\n    setActivePage(1);\n    setKeyword(event.target.value);\n  };\n\n  const onSort = (_, data) => {\n    setActivePage(1);\n    dispatch(sortRepositories(data.value));\n  };\n\n  const onMarkRepository = id => {\n    dispatch(addToFavorites(id));\n  };\n\n  return {\n    onSearch,\n    onSort,\n    onMarkRepository,\n    paginatedData,\n    handleNextPage,\n    activePage,\n    totalPages,\n    loading\n  };\n};","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/containers/RepositoriesList/useRepositoriesList.ts"],"names":["getPublicRepositories","getSearchedRepositories","useAppDispatch","addToFavorites","sortRepositories","useSelector","useEffect","useState","useDebounce","usePagination","useRepositoriesList","repositories","loading","state","githubReducer","keyword","setKeyword","dispatch","debounceSearchTerm","q","paginatedData","handleNextPage","activePage","totalPages","resetPage","onSearch","event","setActivePage","target","value","onSort","_","data","onMarkRepository","id"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,uBAAhC,QAA+D,8BAA/D;AACA,SAAoBC,cAApB,QAA0C,yBAA1C;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,sCAAjD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAKA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACvC,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA4BP,WAAW,CAAEQ,KAAD,IAAsBA,KAAK,CAACC,aAA7B,CAA7C;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMU,QAAQ,GAAGf,cAAc,EAA/B;AACAI,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAACjB,qBAAqB,EAAtB,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,QAAMkB,kBAAkB,GAAGV,WAAW,CAACO,OAAD,EAAU,GAAV,CAAtC;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACY,kBAAL,EAAyB;AACzBD,IAAAA,QAAQ,CAAChB,uBAAuB,CAAC;AAAEkB,MAAAA,CAAC,EAAED;AAAL,KAAD,CAAxB,CAAR;AACD,GAHQ,EAGN,CAACA,kBAAD,CAHM,CAAT;AAKA,QAAM;AAAEE,IAAAA,aAAF;AAAiBC,IAAAA,cAAjB;AAAiCC,IAAAA,UAAjC;AAA6CC,IAAAA,UAA7C;AAAyDC,IAAAA;AAAzD,MACJf,aAAa,CAAaE,YAAb,EAA2B,EAA3B,CADf;;AAGA,QAAMc,QAAQ,GAAIC,KAAD,IAAgD;AAC/DC,IAAAA,aAAa,CAAC,CAAD,CAAb;AACAX,IAAAA,UAAU,CAACU,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAV;AACD,GAHD;;AAIA,QAAMC,MAAM,GAAG,CAACC,CAAD,EAA8CC,IAA9C,KAAsE;AACnFL,IAAAA,aAAa,CAAC,CAAD,CAAb;AACAV,IAAAA,QAAQ,CAACb,gBAAgB,CAAC4B,IAAI,CAACH,KAAN,CAAjB,CAAR;AACD,GAHD;;AAIA,QAAMI,gBAAgB,GAAIC,EAAD,IAAgB;AACvCjB,IAAAA,QAAQ,CAACd,cAAc,CAAC+B,EAAD,CAAf,CAAR;AACD,GAFD;;AAIA,SAAO;AACLT,IAAAA,QADK;AAELK,IAAAA,MAFK;AAGLG,IAAAA,gBAHK;AAILb,IAAAA,aAJK;AAKLC,IAAAA,cALK;AAMLC,IAAAA,UANK;AAOLC,IAAAA,UAPK;AAQLX,IAAAA;AARK,GAAP;AAUD,CAvCM","sourcesContent":["import { getPublicRepositories, getSearchedRepositories } from 'client/_redux/actions/github';\nimport { RootState, useAppDispatch } from 'client/_redux/app/store';\nimport { addToFavorites, sortRepositories } from 'client/_redux/reducers/githubReducer';\nimport { useSelector } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport { useDebounce } from 'client/hooks/useDebounce';\nimport { usePagination } from 'client/hooks/usePagination';\nimport { DropdownProps } from 'semantic-ui-react';\nimport { SortingValues } from 'client/constants/sortOptions';\nimport { Repository } from 'models/Repository';\n\nexport const useRepositoriesList = () => {\n  const { repositories, loading } = useSelector((state: RootState) => state.githubReducer);\n  const [keyword, setKeyword] = useState('');\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(getPublicRepositories());\n  }, []);\n  const debounceSearchTerm = useDebounce(keyword, 500);\n\n  useEffect(() => {\n    if (!debounceSearchTerm) return;\n    dispatch(getSearchedRepositories({ q: debounceSearchTerm }));\n  }, [debounceSearchTerm]);\n\n  const { paginatedData, handleNextPage, activePage, totalPages, resetPage } =\n    usePagination<Repository>(repositories, 30);\n\n  const onSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setActivePage(1);\n    setKeyword(event.target.value);\n  };\n  const onSort = (_: React.SyntheticEvent<HTMLElement, Event>, data: DropdownProps) => {\n    setActivePage(1);\n    dispatch(sortRepositories(data.value as SortingValues));\n  };\n  const onMarkRepository = (id: number) => {\n    dispatch(addToFavorites(id));\n  };\n\n  return {\n    onSearch,\n    onSort,\n    onMarkRepository,\n    paginatedData,\n    handleNextPage,\n    activePage,\n    totalPages,\n    loading,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}