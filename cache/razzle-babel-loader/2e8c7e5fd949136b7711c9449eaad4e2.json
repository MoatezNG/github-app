{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getPublicRepositories, getSearchedRepositories } from 'client/actions/github';\nconst initialState = {\n  repositories: [],\n  loading: false\n};\nexport const countSlice = createSlice({\n  name: 'github',\n  initialState,\n  reducers: {\n    sortByAlphabetic: state => {\n      state.repositories = state.repositories.sort((a, b) => a.name.localeCompare(b.name));\n    }\n  },\n  extraReducers: {\n    [getPublicRepositories.pending.type]: state => {\n      state.loading = true;\n    },\n    [getPublicRepositories.fulfilled.type]: (state, {\n      payload\n    }) => {\n      state.repositories = payload;\n      state.loading = false;\n    },\n    [getPublicRepositories.rejected.type]: state => {\n      state.loading = false;\n    },\n    // search\n    [getSearchedRepositories.pending.type]: state => {\n      state.loading = true;\n    },\n    [getSearchedRepositories.fulfilled.type]: (state, {\n      payload\n    }) => {\n      state.repositories = [...payload.items, ...state.repositories];\n      state.loading = false;\n    },\n    [getSearchedRepositories.rejected.type]: state => {\n      state.loading = false;\n      state.repositories = [];\n    }\n  }\n});\nexport default countSlice.reducer;","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/_redux/reducers/githubReducer.ts"],"names":["createSlice","getPublicRepositories","getSearchedRepositories","initialState","repositories","loading","countSlice","name","reducers","sortByAlphabetic","state","sort","a","b","localeCompare","extraReducers","pending","type","fulfilled","payload","rejected","items","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,qBAAT,EAAgCC,uBAAhC,QAA+D,uBAA/D;AASA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,YAAY,EAAE,EADiB;AAE/BC,EAAAA,OAAO,EAAE;AAFsB,CAAjC;AAIA,OAAO,MAAMC,UAAU,GAAGN,WAAW,CAAC;AACpCO,EAAAA,IAAI,EAAE,QAD8B;AAEpCJ,EAAAA,YAFoC;AAGpCK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,gBAAgB,EAAGC,KAAD,IAAuB;AACvCA,MAAAA,KAAK,CAACN,YAAN,GAAqBM,KAAK,CAACN,YAAN,CAAmBO,IAAnB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACL,IAAF,CAAOO,aAAP,CAAqBD,CAAC,CAACN,IAAvB,CAAlC,CAArB;AACD;AAHO,GAH0B;AAQpCQ,EAAAA,aAAa,EAAE;AACb,KAACd,qBAAqB,CAACe,OAAtB,CAA8BC,IAA/B,GAAuCP,KAAD,IAAW;AAC/CA,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD,KAHY;AAIb,KAACJ,qBAAqB,CAACiB,SAAtB,CAAgCD,IAAjC,GAAwC,CACtCP,KADsC,EAEtC;AAAES,MAAAA;AAAF,KAFsC,KAGnC;AACHT,MAAAA,KAAK,CAACN,YAAN,GAAqBe,OAArB;AACAT,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,KAVY;AAWb,KAACJ,qBAAqB,CAACmB,QAAtB,CAA+BH,IAAhC,GAAwCP,KAAD,IAAW;AAChDA,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,KAbY;AAeb;AACA,KAACH,uBAAuB,CAACc,OAAxB,CAAgCC,IAAjC,GAAyCP,KAAD,IAAW;AACjDA,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD,KAlBY;AAoBb,KAACH,uBAAuB,CAACgB,SAAxB,CAAkCD,IAAnC,GAA0C,CACxCP,KADwC,EAExC;AAAES,MAAAA;AAAF,KAFwC,KAGrC;AACHT,MAAAA,KAAK,CAACN,YAAN,GAAqB,CAAC,GAAGe,OAAO,CAACE,KAAZ,EAAmB,GAAGX,KAAK,CAACN,YAA5B,CAArB;AACAM,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,KA1BY;AA2Bb,KAACH,uBAAuB,CAACkB,QAAxB,CAAiCH,IAAlC,GAA0CP,KAAD,IAAW;AAClDA,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACAK,MAAAA,KAAK,CAACN,YAAN,GAAqB,EAArB;AACD;AA9BY;AARqB,CAAD,CAA9B;AA0CP,eAAeE,UAAU,CAACgB,OAA1B","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { getPublicRepositories, getSearchedRepositories } from 'client/actions/github';\nimport { Repository } from 'models/Repository';\nimport { PaginatedResponse } from 'types/utils';\n\nexport type countState = {\n  repositories: Repository[];\n  loading: boolean;\n};\n\nconst initialState: countState = {\n  repositories: [],\n  loading: false,\n};\nexport const countSlice = createSlice({\n  name: 'github',\n  initialState,\n  reducers: {\n    sortByAlphabetic: (state: countState) => {\n      state.repositories = state.repositories.sort((a, b) => a.name.localeCompare(b.name));\n    },\n  },\n  extraReducers: {\n    [getPublicRepositories.pending.type]: (state) => {\n      state.loading = true;\n    },\n    [getPublicRepositories.fulfilled.type]: (\n      state: countState,\n      { payload }: PayloadAction<Repository[]>,\n    ) => {\n      state.repositories = payload;\n      state.loading = false;\n    },\n    [getPublicRepositories.rejected.type]: (state) => {\n      state.loading = false;\n    },\n\n    // search\n    [getSearchedRepositories.pending.type]: (state) => {\n      state.loading = true;\n    },\n\n    [getSearchedRepositories.fulfilled.type]: (\n      state,\n      { payload }: PayloadAction<PaginatedResponse<Repository>>,\n    ) => {\n      state.repositories = [...payload.items, ...state.repositories];\n      state.loading = false;\n    },\n    [getSearchedRepositories.rejected.type]: (state) => {\n      state.loading = false;\n      state.repositories = [];\n    },\n  },\n});\n\nexport default countSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}