{"ast":null,"code":"import { useEffect, useState } from 'react';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const usePagination = (data, alreadyPaginatedData, limit) => {\n  const {\n    0: activePage,\n    1: setActivePage\n  } = useState(1);\n  const {\n    0: paginatedData,\n    1: setPaginatedData\n  } = useState([]);\n  const {\n    0: keyword,\n    1: setKeyword\n  } = useState('');\n  useEffect(() => {\n    if (!keyword) {\n      setActivePage(1);\n      setPaginatedData(data.slice((activePage - 1) * limit, limit * activePage));\n    }\n\n    setPaginatedData(alreadyPaginatedData);\n  }, [activePage, data, keyword]);\n\n  const handleNextPage = (_, props) => {\n    setActivePage(props.activePage);\n  };\n\n  const onSearch = e => {\n    setKeyword(e.target.value);\n  };\n\n  return {\n    paginatedData,\n    handleNextPage,\n    activePage,\n    totalPages: Math.ceil(data.length / limit)\n  };\n};","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/hooks/usePagination.ts"],"names":["useEffect","useState","usePagination","data","alreadyPaginatedData","limit","activePage","setActivePage","paginatedData","setPaginatedData","keyword","setKeyword","slice","handleNextPage","_","props","onSearch","e","target","value","totalPages","Math","ceil","length"],"mappings":"AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA;AACA,OAAO,MAAMC,aAAa,GAAG,CAC3BC,IAD2B,EAE3BC,oBAF2B,EAG3BC,KAH2B,KASxB;AACH,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BN,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM;AAAA,OAACO,aAAD;AAAA,OAAgBC;AAAhB,MAAoCR,QAAQ,CAAM,EAAN,CAAlD;AACA,QAAM;AAAA,OAACS,OAAD;AAAA,OAAUC;AAAV,MAAwBV,QAAQ,CAAC,EAAD,CAAtC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACU,OAAL,EAAc;AACZH,MAAAA,aAAa,CAAC,CAAD,CAAb;AACAE,MAAAA,gBAAgB,CAACN,IAAI,CAACS,KAAL,CAAW,CAACN,UAAU,GAAG,CAAd,IAAmBD,KAA9B,EAAqCA,KAAK,GAAGC,UAA7C,CAAD,CAAhB;AACD;;AACDG,IAAAA,gBAAgB,CAACL,oBAAD,CAAhB;AACD,GANQ,EAMN,CAACE,UAAD,EAAaH,IAAb,EAAmBO,OAAnB,CANM,CAAT;;AAOA,QAAMG,cAAc,GAAG,CAACC,CAAD,EAAyCC,KAAzC,KAAoE;AACzFR,IAAAA,aAAa,CAACQ,KAAK,CAACT,UAAP,CAAb;AACD,GAFD;;AAIA,QAAMU,QAAQ,GAAIC,CAAD,IAAY;AAC3BN,IAAAA,UAAU,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AACD,GAFD;;AAIA,SAAO;AACLX,IAAAA,aADK;AAELK,IAAAA,cAFK;AAGLP,IAAAA,UAHK;AAILc,IAAAA,UAAU,EAAEC,IAAI,CAACC,IAAL,CAAUnB,IAAI,CAACoB,MAAL,GAAclB,KAAxB;AAJP,GAAP;AAMD,CAlCM","sourcesContent":["import { getSearchedRepositories } from 'client/services/github';\nimport { useEffect, useState } from 'react';\nimport { PaginationProps } from 'semantic-ui-react';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const usePagination = <T extends Record<string, any>>(\n  data: T[],\n  alreadyPaginatedData: T[],\n  limit: number,\n): {\n  paginatedData: T[];\n  handleNextPage: (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => void;\n  activePage: number;\n  totalPages: number;\n} => {\n  const [activePage, setActivePage] = useState(1);\n  const [paginatedData, setPaginatedData] = useState<T[]>([]);\n  const [keyword, setKeyword] = useState('');\n  useEffect(() => {\n    if (!keyword) {\n      setActivePage(1);\n      setPaginatedData(data.slice((activePage - 1) * limit, limit * activePage));\n    }\n    setPaginatedData(alreadyPaginatedData);\n  }, [activePage, data, keyword]);\n  const handleNextPage = (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => {\n    setActivePage(props.activePage as number);\n  };\n\n  const onSearch = (e: any) => {\n    setKeyword(e.target.value);\n  };\n\n  return {\n    paginatedData,\n    handleNextPage,\n    activePage,\n    totalPages: Math.ceil(data.length / limit),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}