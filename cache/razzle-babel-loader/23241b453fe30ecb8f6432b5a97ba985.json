{"ast":null,"code":"import { useEffect, useState } from 'react';\nexport const usePagination = (data, limit) => {\n  const {\n    0: activePage,\n    1: setActivePage\n  } = useState(1);\n  const {\n    0: paginatedData,\n    1: setPaginatedData\n  } = useState([]);\n  useEffect(() => {\n    setPaginatedData(prevState => [...prevState, ...data.slice((activePage - 1) * limit, limit * activePage)]);\n  }, [activePage, data]);\n\n  const handleNextPage = (_, props) => {\n    setActivePage(props.activePage);\n  };\n\n  return {\n    paginatedData,\n    handleNextPage,\n    activePage\n  };\n};","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/github-app/src/client/hooks/usePagination.ts"],"names":["useEffect","useState","usePagination","data","limit","activePage","setActivePage","paginatedData","setPaginatedData","prevState","slice","handleNextPage","_","props"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA,OAAO,MAAMC,aAAa,GAAG,CAC3BC,IAD2B,EAE3BC,KAF2B,KAOxB;AACH,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BL,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM;AAAA,OAACM,aAAD;AAAA,OAAgBC;AAAhB,MAAoCP,QAAQ,CAAM,EAAN,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,gBAAgB,CAAEC,SAAD,IAAe,CAC9B,GAAGA,SAD2B,EAE9B,GAAGN,IAAI,CAACO,KAAL,CAAW,CAACL,UAAU,GAAG,CAAd,IAAmBD,KAA9B,EAAqCA,KAAK,GAAGC,UAA7C,CAF2B,CAAhB,CAAhB;AAID,GALQ,EAKN,CAACA,UAAD,EAAaF,IAAb,CALM,CAAT;;AAMA,QAAMQ,cAAc,GAAG,CAACC,CAAD,EAAyCC,KAAzC,KAAoE;AACzFP,IAAAA,aAAa,CAACO,KAAK,CAACR,UAAP,CAAb;AACD,GAFD;;AAIA,SAAO;AAAEE,IAAAA,aAAF;AAAiBI,IAAAA,cAAjB;AAAiCN,IAAAA;AAAjC,GAAP;AACD,CAtBM","sourcesContent":["import { useEffect, useState } from 'react';\nimport { PaginationProps } from 'semantic-ui-react';\n\nexport const usePagination = <T extends Record<string, any>>(\n  data: T[],\n  limit: number,\n): {\n  paginatedData: T[];\n  handleNextPage: (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => void;\n  activePage: number;\n} => {\n  const [activePage, setActivePage] = useState(1);\n  const [paginatedData, setPaginatedData] = useState<T[]>([]);\n\n  useEffect(() => {\n    setPaginatedData((prevState) => [\n      ...prevState,\n      ...data.slice((activePage - 1) * limit, limit * activePage),\n    ]);\n  }, [activePage, data]);\n  const handleNextPage = (_: React.MouseEvent<HTMLAnchorElement>, props: PaginationProps) => {\n    setActivePage(props.activePage as number);\n  };\n\n  return { paginatedData, handleNextPage, activePage };\n};\n"]},"metadata":{},"sourceType":"module"}